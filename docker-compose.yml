version: '3.8'

services:
  rabbitmq:
    image: "rabbitmq:management"
    ports:
      - "15672:15672"  # Management UI
      - "5672:5672"    # AMQP protocol
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
    networks:
      - app_network

  postgres:
    image: "postgres:latest"
    environment:
      POSTGRES_DB: file_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d file_db"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
    networks:
      - app_network

  redis:
    image: "redis:latest"
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
    networks:
      - app_network

  file_reader:
    build: ./file_reader_microservice
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./data:/data
    environment:
      RABBITMQ_HOST: "rabbitmq"  
    networks:
      - app_network

  data_consumer:
    build: ./data_consumer
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: "rabbitmq"  # Use service name for RabbitMQ
      POSTGRES_HOST: "postgres"  # Use service name for Postgres
    networks:
      - app_network
    tty: true
    stdin_open: true

  api_server:
    build: ./api_service
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./api_service:/api_service
    environment:
      RABBITMQ_HOST: "rabbitmq"  # Use service name for RabbitMQ
      POSTGRES_HOST: "postgres"  # Use service name for Postgres
    networks:
      - app_network
    command: ["gunicorn", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "main:app", "--bind", "0.0.0.0:8000"]  # Bind to 0.0.0.0 instead of 127.0.0.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s


networks:
  app_network:
    driver: bridge
